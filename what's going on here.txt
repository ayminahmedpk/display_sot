

Program structure at a glance:

    Components logical structure:
        1. Search        : SearchResult
        2. YouTubeVideo  : 
        3. Controls      :
        4. StampList     : StampListItem
        5. Comment       :
        6. OAuthRedirect :

    
    Pages:
        
        1. SearchPage : Search
                        Search Results
        
        2. StampPage  : YouTubeVideo
                        Controls
                        StampList
                        Comment

    
    Notable features utilized and general description:
        
        1. Routing     : App has routing features enabled. Multiple pages
                         simulated on an SPA. Also, not just BrowserRouter but
                         actually HashRouter to allow deployment on netlify /
                         github.
        
        2. Redux       : Used to store the 'ref' of the video player element.
                         
                         Used to store a list of modifiable timestamps.

        3. OAuth       : Program communicates with Google to authorize itself
                         with the user's YouTube credentials to post comment.
                         It does this the simple, old fashined way without any
                         fancy externally made component.

        4. UseState    : Used in Search component to update search input,
                         results.
                         
                         Used in StampList component to keep track of user
                         comment (and any edits) and also whether the comment
                         box is hidden by user or not.
        
        5. UseRef      : Used to store the player element into Redux, so that
                         the controls can actually access the player.
        
        6. "hompepage" : This package.json value was altered to "." for testing
                         in a local development environment, and later to an
                         actual website to enable functionality on netlify /
                         github.

    
    External libraries / code / components used:

        1. ReactPlayer : To open an embedded Youtube player for chosen search
                         result.

        2. HE          : HTML Entities. To be able to properly parse the video
                         titles returned by the Youtube search API.

        3. Helpers     : Various self-created helper functions to make things
                         simpler and clearer in the main program.
                         




Program flow:

* A Redux store is created from a root reducer (composed of a player reducer and
  a stamp reducer) and provided to the entire app.

* Due to issues with redirection on github / netlify (they cant handle /redirect
  as an argument, they look for file or directory named 'redirect' and fail to
  find it), OAuth Redirect handler had to be moved from a separate component,
  and put into the main SPA itself.

    -> Program starts assuming this may be a Google OAuth redirect and talks
       about it regardless of whether it is or isn't. If it is, it adds the
       received access token to local storage. Underneath OAuth, the real
       app starts.

    -> The search component is displayed. This fetches search results from
       Youtube and renders them via the SearchResult component, which shows them
       as [link] elements below the search component.

    -> The SearchResult component, when clicked, will simply change the route to
       trigger into StampPage, along with the videoID as a /:param .

    -> The StampPage loads the YouTubeVideo component (which is the actual
       embedded video player), and the Controls component, which is the video
       controls. CSS makes it so that controls are overlayed on top of the
       YouTubeVideo component. The page also loads the StampList and Comment
       components, but they aren't visible until the first comment is created.

    -> Creating a timestamp shows the StampList component, which has full CRUD
       functionality with the Redux store. Additionally, it also has a
       "generate comment" button, which converts the stamps into typical comment
       text and opens up an editable comment box below.

    -> Comment box's contents are initially generated by the StampList
       component's generate comment button, and they can be edited directly by
       the user, or they can be regenerated from clicking aforementioned button
       again. This resulting comment, whether generated or edited, is saved in
       this component's local state via useState.

    -> In the comment component is also a Post Comment button. This checks to
       see if there is an access token in local storage. If there is, the button
       simply posts the comment with that token, and does nothing else. If not,
       then the button triggers OAuth flow in a new tab, which redirects to the
       same SPA page within that new tab. And once the token is received in that
       tab, that tab can simply be closed since local storage is shared between
       tabs, and clicking on the post comment button again will post it using
       the received access token.